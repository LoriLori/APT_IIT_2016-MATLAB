/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dias;

import Jama.Matrix;
import java.util.*; 
import javax.mail.MessagingException;
//stuff we need for configuration
import org.apache.commons.configuration2.beanutils.BeanDeclaration;
import org.apache.commons.configuration2.beanutils.BeanHelper;
import org.apache.commons.beanutils.BeanIntrospector;
import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.configuration2.beanutils.XMLBeanDeclaration;
import org.apache.commons.configuration2.*; 
import org.apache.commons.configuration2.ex.*; 
import org.apache.commons.configuration2.builder.fluent.Configurations; 
import org.apache.commons.configuration2.tree.xpath.XPathExpressionEngine; 
import org.apache.commons.logging.*; 



/**
 *
 * @author User
 */
public class DIAS {

    //Parameter : current processing environment. 
    // This allows us to switch between <processing> nodes in the configuration XML 
    // by using the @env attribute. 
    public static final String configurationEnvironment = "dev_cl"; 
    //Parameter: excel files to save/load variables
    //TODO make sure files exist in the given path
    public static String excelFilePath ;
    //Parameter: File for Bodymedia read values
    //TODO make sure this file is the same as the xls generated by BodyMedia
    public static String bodymediaFileUrl;
    //Parameter: Email to receive messages
    public static String[] privateMails;

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws MessagingException, Exception {
        //Set up configuration here so we can read from the configuration file for our previously-static 
        // variables. 
        boolean configureOK = configureSession(); 
        
        //Start Graphical interface
        //XXX restore this next line before merging with master. 
        if (configureOK) {new GUI().setVisible(true);}

        //  ChocaNonLinear ch = new ChocaNonLinear ();
        //   ch.Choca();
    }

    //Is it bad that this method is referencing our now-global variables? Eh, maybe. 
    //This only needs to run here, though. We can expand to a full class with a factory etc. 
    // for all our platform-specific global variables if we need to. 
    public static boolean configureSession() { 
        boolean output = false; //be pessimistic. 
        Configurations configs = new Configurations();
        try
        {
            //System.out.println("User directory is " + System.getProperty("user.dir"));
            XMLConfiguration config = configs.xml("config/configuration.xml"); //this is a really nice factory implementation we're eliding
            //use XPATH so we can query attributes. NB that this means we'll be using slash-style lookup as in 
            // "processing/paths/excelFilePath" 
            // instead of 
            // "processing.paths.excelFilePath"
            config.setExpressionEngine(new XPathExpressionEngine()); 
            excelFilePath = config.getString("processing[@env='" + configurationEnvironment + "']/paths/excelFilePath");
            bodymediaFileUrl = config.getString("processing[@env='" + configurationEnvironment + "']/paths/bodymediaFileUrl");
            //HierarchicalConfiguration node = (HierarchicalConfiguration) config.configurationAt("/nodes/node[@id='"+(str)+"']");
            List<String> emails = config.getList(String.class, "processing[@env='" + configurationEnvironment + "']/emails/email"); 
            privateMails = new String[emails.size()];
            privateMails = emails.toArray(privateMails);  
            output = true; 
        }
        catch (ConfigurationException cex)
        {
            //Something went wrong; we should probably check to see if the configuration file wasn't found, 
            // but otherwise just keep the output as false.
            System.out.println(cex.getMessage());
        }
        return output; 
    }
    
    //////////////////////////////For show the result in Matrix Class/////////////////////////////////////////////////////////////////////////////////////////
    public static void printMatrix(Matrix m, String name) {
        System.out.print("\n " + name + ": \n{");
        for (double[] row : m.getArray()) {
            for (double val : row) {
                System.out.print(" " + val);
            }
            System.out.println();
        }
        System.out.println("}");
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  

    public static int[] lastvaluereturnx(Matrix s) {
        int lastvaluex = 0;
        int lastvaluey = 0;

        for (int i = 0; i < s.getColumnDimension(); i++) {
            for (int j = 0; j < s.getRowDimension(); j++) {
                if (s.get(i, j) != 0) {
                    lastvaluex = i;
                    lastvaluey = j;
                }
            }
        }
        int[] resultlocation = new int[2];
        resultlocation[0] = lastvaluex;
        resultlocation[1] = lastvaluey;

        return resultlocation;
    }

}
